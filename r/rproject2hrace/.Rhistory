wd()
getwd
getw
getwd()
source("tool.r") source("env.r") source("pre.factors.r") source("simulation.r")
source("tool.r")
source("tool.r")
source("env.r")
source("pre.factors.r")
source("simulation.r")
source("simulation.r")
x <- c(1:10)
x
x <- c(2: 9)
x
x <- c(2*1:9)
x
x[, 1]
n <- matrix(c("a", "b", "c", "d", "a", "c"), nc = 1)
n
v <- matrix(c(2, 3, 3, 5, 1, 3.5), nc = 1)
v
x <- cbin(n, v)
x <- cbind(n, v)
x
x[, 2]
as.numeric(x[,2])
int <- matrix(as.numeric(x[, 2]), nc = 1) interval <- data.frame(int)
interval
name <- c(x[, 1])
name
factor <- factor(name, exclude = "")
factor
list(factor)
rlt <- aggregate(interval, by = list(factor), FUN = "median", na.rm = T)
rlt
interval
colnames(rlt)
rlt
sourc
source(pre.factors.r)
# 1) # get raw data from file data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE data.raw <- data.raw[ix,] data.raw[,race.ix] # 2) ### get unique race id race.id <- unique(data.raw[,race.ix], incomparables = FALSE) race.seq <- matrix(NA,nr = nrow(data.raw),nc=1) colnames(race.seq) <- "race.num" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	race.seq[ix,1] <- i } #View(race.seq) # 3) # turn interval into pro for each race pro <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "pro" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	pro[ix,1] <- time.2.pro(matrix(data.raw[ix,interval.ix]), shrunk = 1000) 	#pro[ix,1] } #data.raw <- cbind(data.raw, pro) #View(data.raw) # 4)  # turn time to interval interval <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "interval" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	interval[ix,1] <- time.2.interval(matrix(data.raw[ix,interval.ix])) 	#interval[ix,1] } #data.raw <- cbind(data.raw, pro, interval) #View(data.raw) # 5) caculate historical horse interval: avg.horse.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.horse.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.horse.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 100 	ix.100 <- (i-1 >= race.seq[,1]) & (i-roll.back.horse.interval.1 < race.seq[,1]) 	horse <- data.raw[ix.100,horse.ix] 	interval.slice <- interval[ix.100,1] 	avg.100 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.100) 	avg.horse.int.100[ix,1] <- as.numeric(x[,2]) 	# 50 	ix.50 <- (i-1 >= race.seq[,1]) & (i-roll.back.horse.interval.2 < race.seq[,1]) 	horse <- data.raw[ix.50,horse.ix] 	interval.slice <- interval[ix.50,1] 	avg.50 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.50) 	avg.horse.int.50[ix,1] <- as.numeric(x[,2]) 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.horse.interval.3 < race.seq[,1]) 	horse <- data.raw[ix.20,horse.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.horse.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.horse.int.100,avg.horse.int.50,avg.horse.int.20)) # 6) caculate historical jockey interval: avg.jockey.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.jockey.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.jockey.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 100 	ix.100 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.1 < race.seq[,1]) 	jockey <- data.raw[ix.100,jockey.ix] 	interval.slice <- interval[ix.100,1] 	avg.100 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.100) 	avg.jockey.int.100[ix,1] <- as.numeric(x[,2]) 	# 50 	ix.50 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.2 < race.seq[,1]) 	jockey <- data.raw[ix.50,jockey.ix] 	interval.slice <- interval[ix.50,1] 	avg.50 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.50) 	avg.jockey.int.50[ix,1] <- as.numeric(x[,2]) 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.3 < race.seq[,1]) 	jockey <- data.raw[ix.20,jockey.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.jockey.int.20[ix,1] <- as.numeric(x[,2]) }   View(cbind(avg.jockey.int.100,avg.jockey.int.50,avg.jockey.int.20))
data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T))
data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T))
ix.first <- data.raw[, finishing.position.ix] == "1"
ix.first
data.raw[, finishing.position.ix]
data.raw <- as.matrix(read.csv(paste("../input/race - result - horse - fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T))
data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T))
ix <- matrix(TRUE, nr=nrow(data.raw), nc=1)
data.raw
nrow(data.raw)
ix <- matrix(TRUE, nr=nrow(data.raw), nc=1)
first.col <- as.numeric(data.raw[,1])
first
first.col
first.col.length
length(first.col)
ix <- first.col > 20
ix
first.col
ix[ix == FALSE] <- TRUE
ix
ix[is.na(ix)] <- FALSE
ix
data.raw
data.raw <- data.raw[ix,]
data.raw
data.raw[,race.ix]
data.raw
race.id <- unique(data.raw[,race.ix], incomparables = FALSE)
Vi
View(race.id)
race.seq <- matrix(NA,nr = nrow(data.raw),nc=1)
View(race.seq)
colnames(race.seq) <- "race.num"
View(race.seq)
for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	race.seq[ix,1] <- i }
View(race.seq)
data.raw[,race.ix]
data.raw
pro <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "pro" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	pro[ix,1] <- time.2.pro(matrix(data.raw[ix,interval.ix]), shrunk = 1000) 	#pro[ix,1] }
pro
View(pro)
interval <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "interval" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	interval[ix,1] <- time.2.interval(matrix(data.raw[ix,interval.ix])) 	#interval[ix,1] }
View(interval)
race.seq[, 1]
interval
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject1/script.R")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
n
n
n
n
Q
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
n
n
n
n
n
n
n
source("tool.r") source("env.r")
source("tool.r")
source("env.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
n
Q
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
n
n
n
n
n
n
n
n
n
n
n
n
n
n
c
c
c
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
n
n
n
n
n
n
n
n
n
n
c
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
c
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
Q
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
n
n
n
n
c
c
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
Q
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
c
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
debug()
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
source("tool.r")
sour
source("env.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("pre.factors.r")
source("tools")
source("tool.r")
source("env.r")
rtvs::debug_source("pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r", encoding = "gb2312")
source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r", echo = TRUE, encoding = "gb2312")
ix
ix
source("tool.r")
source("env.r")
ix
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE # renc, after the above, the horse finish the race will be TRUE, does not finish the race will be FALSE data.raw <- data.raw[ix,] # renc, looks like the horses do not finish the race are ignored/removed. data.raw[,race.ix] # 2) ### get unique race id race.id <- unique(data.raw[,race.ix], incomparables = FALSE) # renc, there could be a bug here, when the race.id is not sorted (ascending).  race.seq <- matrix(NA,nr = nrow(data.raw),nc=1) colnames(race.seq) <- "race.num" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	race.seq[ix,1] <- i } # renc, the values at race.seq[ix, 1] the first column, are set to unique race id.  #View(race.seq) # 3) # turn interval into pro for each race   # renc, turn the (finish time) into probability ? pro <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "pro" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	pro[ix,1] <- time.2.pro(matrix(data.raw[ix,interval.ix]), shrunk = 1000) 	#pro[ix,1] } #data.raw <- cbind(data.raw, pro) #View(data.raw)
View(pro)
# 4)  # turn time to interval interval <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "interval"                    #renc, this is bug? colnames(interval) <- "interval"   for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	interval[ix,1] <- time.2.interval(matrix(data.raw[ix,interval.ix])) 	#interval[ix,1] } #data.raw <- cbind(data.raw, pro, interval) #View(data.raw)
length(race.id)
race.seq
View(race.id)
view(race.seq)
View(race.seq)
objects()
ix.001 <- (101-1 >= race.seq[,1]) & (101 -roll.)
ix.001 <- (101-1 >= race.seq[,1]) & (101 -roll.back.horse.interval.1 < race.seq[,1])
ix.001
ix.001 <- (10-1 >= race.seq[,1]) & (10 -roll.back.horse.interval.1 < race.seq[,1])
ix.001
length(race.seq)
length(ix.001)
avg.horse.int.20 <- matrix(NA,nrow(data.raw),nc=1)
avg.horse.int.20
for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.horse.interval.3 < race.seq[,1]) 	horse <- data.raw[ix.20,horse.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.horse.int.20[ix,1] <- as.numeric(x[,2]) }
avg.horse.int.20
avg.horse.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next     if (FALSE) {         # 100         ix.100 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.1 < race.seq[, 1])         horse <- data.raw[ix.100, horse.ix]         interval.slice <- interval[ix.100, 1]         avg.100 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.100)         avg.horse.int.100[ix, 1] <- as.numeric(x[, 2])         # 50         ix.50 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.2 < race.seq[, 1])         horse <- data.raw[ix.50, horse.ix]         interval.slice <- interval[ix.50, 1]         avg.50 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.50)         avg.horse.int.50[ix, 1] <- as.numeric(x[, 2])     } 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-10< race.seq[,1])#roll.back.horse.interval.3 	horse <- data.raw[ix.20,horse.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.horse.int.20[ix,1] <- as.numeric(x[,2]) }
ix.20
avg.horse.int.20
for(i in 1:length(race.id)) { 	if (i < start.date) next     if (FALSE) {         # 100         ix.100 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.1 < race.seq[, 1])         horse <- data.raw[ix.100, horse.ix]         interval.slice <- interval[ix.100, 1]         avg.100 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.100)         avg.horse.int.100[ix, 1] <- as.numeric(x[, 2])         # 50         ix.50 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.2 < race.seq[, 1])         horse <- data.raw[ix.50, horse.ix]         interval.slice <- interval[ix.50, 1]         avg.50 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.50)         avg.horse.int.50[ix, 1] <- as.numeric(x[, 2])     } 	# 20     ix.20 <- (i - 1 >= race.seq[, 1]) & (i - 10 < race.seq[, 1]) #roll.back.horse.interval.3     ix.20 	horse <- data.raw[ix.20,horse.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.horse.int.20[ix,1] <- as.numeric(x[,2]) }
print(avg.horse.int.20)
for(i in 1:length(race.id)) { 	if (i < start.date) next     if (FALSE) {         # 100         ix.100 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.1 < race.seq[, 1])         horse <- data.raw[ix.100, horse.ix]         interval.slice <- interval[ix.100, 1]         avg.100 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.100)         avg.horse.int.100[ix, 1] <- as.numeric(x[, 2])         # 50         ix.50 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.2 < race.seq[, 1])         horse <- data.raw[ix.50, horse.ix]         interval.slice <- interval[ix.50, 1]         avg.50 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.50)         avg.horse.int.50[ix, 1] <- as.numeric(x[, 2])     } 	# 20     ix.20 <- (i - 1 >= race.seq[, 1]) & (i - 10 < race.seq[, 1]) #roll.back.horse.interval.3     print(ix.20) 	horse <- data.raw[ix.20,horse.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.horse.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.horse.int.100,avg.horse.int.50,avg.horse.int.20))
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
source("tool.r")
source("env.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/pre.factors.r")
rtvs::debug_source("~/GitHub/coding_exercises/r/rproject2hrace/src/main.r")
source(pre.factors.r)
source("pre.factors.r")
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE # renc, after the above, the horse finish the race will be TRUE, does not finish the race will be FALSE data.raw <- data.raw[ix,] # renc, looks like the horses do not finish the race are ignored/removed. data.raw[,race.ix] # 2) ### get unique race id race.id <- unique(data.raw[,race.ix], incomparables = FALSE) # renc, there could be a bug here, when the race.id is not sorted (ascending).  race.seq <- matrix(NA,nr = nrow(data.raw),nc=1) colnames(race.seq) <- "race.num" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	race.seq[ix,1] <- i } # renc, the values at race.seq[ix, 1] the first column, are set to unique race id.  #View(race.seq) # 3) # turn interval into pro for each race   # renc, turn the (finish time) into probability ? pro <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "pro" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	pro[ix,1] <- time.2.pro(matrix(data.raw[ix,interval.ix]), shrunk = 1000) 	#pro[ix,1] } #data.raw <- cbind(data.raw, pro) #View(data.raw) # 4)  # turn time to interval interval <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "interval"                    #renc, this is bug? colnames(interval) <- "interval"   for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	interval[ix,1] <- time.2.interval(matrix(data.raw[ix,interval.ix])) 	#interval[ix,1] } #data.raw <- cbind(data.raw, pro, interval) #View(data.raw) # 5) caculate historical horse interval: avg.horse.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.horse.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.horse.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next     if (FALSE) {         # 100         ix.100 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.1 < race.seq[, 1])         horse <- data.raw[ix.100, horse.ix]         interval.slice <- interval[ix.100, 1]         avg.100 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.100)         avg.horse.int.100[ix, 1] <- as.numeric(x[, 2])         # 50         ix.50 <- (i - 1 >= race.seq[, 1]) & (i - roll.back.horse.interval.2 < race.seq[, 1])         horse <- data.raw[ix.50, horse.ix]         interval.slice <- interval[ix.50, 1]         avg.50 <- interval.historical(cbind(horse, interval.slice), c("horse", "interval"))         ix <- i == race.seq[, 1]         x <- matrix(NA, nr = sum(ix, na.rm = T), nc = 2)         x[, 1] <- data.raw[ix, c(horse.ix)]         x <- fill.avg.interval(x, avg.50)         avg.horse.int.50[ix, 1] <- as.numeric(x[, 2])     } 	# 20     ix.20 <- (i - 1 >= race.seq[, 1]) & (i - 10 < race.seq[, 1]) #roll.back.horse.interval.3     print(ix.20) 	horse <- data.raw[ix.20,horse.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.horse.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.horse.int.100,avg.horse.int.50,avg.horse.int.20)) # 6) caculate historical jockey interval: avg.jockey.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.jockey.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.jockey.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 100 	ix.100 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.1 < race.seq[,1]) 	jockey <- data.raw[ix.100,jockey.ix] 	interval.slice <- interval[ix.100,1] 	avg.100 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.100) 	avg.jockey.int.100[ix,1] <- as.numeric(x[,2]) 	# 50 	ix.50 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.2 < race.seq[,1]) 	jockey <- data.raw[ix.50,jockey.ix] 	interval.slice <- interval[ix.50,1] 	avg.50 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.50) 	avg.jockey.int.50[ix,1] <- as.numeric(x[,2]) 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.3 < race.seq[,1]) 	jockey <- data.raw[ix.20,jockey.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.jockey.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.jockey.int.100,avg.jockey.int.50,avg.jockey.int.20))
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T))
 ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE # renc, after the above, the horse finish the race will be TRUE, does not finish the race will be FALSE data.raw <- data.raw[ix,] # renc, looks like the horses do not finish the race are ignored/removed. data.raw[,race.ix]
ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1])
ix <- first.col > 20 ix[ix == FALSE] <- TRUE
ix[is.na(ix)] <- FALSE
data.raw <- data.raw[ix,]
data.raw[,race.ix]
ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE # renc, after the above, the horse finish the race will be TRUE, does not finish the race will be FALSE data.raw <- data.raw[ix,] # renc, looks like the horses do not finish the race are ignored/removed. data.raw[,race.ix]
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE # renc, after the above, the horse finish the race will be TRUE, does not finish the race will be FALSE data.raw <- data.raw[ix,] # renc, looks like the horses do not finish the race are ignored/removed. data.raw[,race.ix]
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1])
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1)
# 1) # get raw data from file #data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) # renc, to use a small sub set date for test.  data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2016.019.csv", sep = ""), sep = ",", header = T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1])
first.col <- as.numeric(data.raw[,1])
data.raw[,1]
as.numeric(data.raw[,1])
first.col <- as.numeric(data.raw[,1]) #renc, Warning message: NAs introduced by coercion
ix <- matrix(TRUE, nr=nrow(data.raw), nc=1)
race.id <- unique(data.raw[,race.ix], incomparables = FALSE) # renc, there could be a bug here, when the race.id is not sorted (ascending).  race.seq <- matrix(NA,nr = nrow(data.raw),nc=1) colnames(race.seq) <- "race.num" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	race.seq[ix,1] <- i } # renc, the values at race.seq[ix, 1] the first column, are set to unique race id.  #View(race.seq) # 3) # turn interval into pro for each race   # renc, turn the (finish time) into probability ? pro <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "pro" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	pro[ix,1] <- time.2.pro(matrix(data.raw[ix,interval.ix]), shrunk = 1000) 	#pro[ix,1] } #data.raw <- cbind(data.raw, pro) #View(data.raw) # 4)  # turn time to interval interval <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "interval"                    #renc, this is bug? colnames(interval) <- "interval"   for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	interval[ix,1] <- time.2.interval(matrix(data.raw[ix,interval.ix])) 	#interval[ix,1] } #data.raw <- cbind(data.raw, pro, interval)
# 1) # get raw data from file data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T))
ix <- matrix(TRUE, nr=nrow(data.raw), nc=1)
first.col <- as.numeric(data.raw[,1])
# 1) # get raw data from file data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1]) ix <- first.col > 20 ix[ix == FALSE] <- TRUE ix[is.na(ix)] <- FALSE data.raw <- data.raw[ix,] data.raw[,race.ix] # 2) ### get unique race id race.id <- unique(data.raw[,race.ix], incomparables = FALSE) race.seq <- matrix(NA,nr = nrow(data.raw),nc=1) colnames(race.seq) <- "race.num" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	race.seq[ix,1] <- i }
# 3) # turn interval into pro for each race pro <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "pro" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	pro[ix,1] <- time.2.pro(matrix(data.raw[ix,interval.ix]), shrunk = 1000) 	#pro[ix,1] }
interval <- matrix(NA, nrow(data.raw), nc=1) colnames(pro) <- "interval" for (i in 1:length(race.id)) { 	ix <- data.raw[,race.ix] == race.id[i] 	interval[ix,1] <- time.2.interval(matrix(data.raw[ix,interval.ix])) 	#interval[ix,1] } #data.raw <- cbind(data.raw, pro, interval) #View(data.raw)
# 5) caculate historical horse interval: avg.horse.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.horse.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.horse.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 100 	ix.100 <- (i-1 >= race.seq[,1]) & (i-roll.back.horse.interval.1 < race.seq[,1]) 	horse <- data.raw[ix.100,horse.ix] 	interval.slice <- interval[ix.100,1] 	avg.100 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.100) 	avg.horse.int.100[ix,1] <- as.numeric(x[,2]) 	# 50 	ix.50 <- (i-1 >= race.seq[,1]) & (i-roll.back.horse.interval.2 < race.seq[,1]) 	horse <- data.raw[ix.50,horse.ix] 	interval.slice <- interval[ix.50,1] 	avg.50 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.50) 	avg.horse.int.50[ix,1] <- as.numeric(x[,2]) 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.horse.interval.3 < race.seq[,1]) 	horse <- data.raw[ix.20,horse.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(horse,interval.slice),c("horse","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(horse.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.horse.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.horse.int.100,avg.horse.int.50,avg.horse.int.20))
# 6) caculate historical jockey interval: avg.jockey.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.jockey.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.jockey.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 100 	ix.100 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.1 < race.seq[,1]) 	jockey <- data.raw[ix.100,jockey.ix] 	interval.slice <- interval[ix.100,1] 	avg.100 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.100) 	avg.jockey.int.100[ix,1] <- as.numeric(x[,2]) 	# 50 	ix.50 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.2 < race.seq[,1]) 	jockey <- data.raw[ix.50,jockey.ix] 	interval.slice <- interval[ix.50,1] 	avg.50 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.50) 	avg.jockey.int.50[ix,1] <- as.numeric(x[,2]) 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.3 < race.seq[,1]) 	jockey <- data.raw[ix.20,jockey.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.jockey.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.jockey.int.100,avg.jockey.int.50,avg.jockey.int.20))
# 6) caculate historical jockey interval: avg.jockey.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.jockey.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.jockey.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 100 	ix.100 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.1 < race.seq[,1]) 	jockey <- data.raw[ix.100,jockey.ix] 	interval.slice <- interval[ix.100,1] 	avg.100 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.100) 	avg.jockey.int.100[ix,1] <- as.numeric(x[,2]) 	# 50 	ix.50 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.2 < race.seq[,1]) 	jockey <- data.raw[ix.50,jockey.ix] 	interval.slice <- interval[ix.50,1] 	avg.50 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.50) 	avg.jockey.int.50[ix,1] <- as.numeric(x[,2]) 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.3 < race.seq[,1]) 	jockey <- data.raw[ix.20,jockey.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.jockey.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.jockey.int.100,avg.jockey.int.50,avg.jockey.int.20))
# 6) caculate historical jockey interval: avg.jockey.int.100 <- matrix(NA,nrow(data.raw),nc=1)	#过去100场平均时间 avg.jockey.int.50 <- matrix(NA,nrow(data.raw),nc=1) avg.jockey.int.20 <- matrix(NA,nrow(data.raw),nc=1) for(i in 1:length(race.id)) { 	if (i < start.date) next 	# 100 	ix.100 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.1 < race.seq[,1]) 	jockey <- data.raw[ix.100,jockey.ix] 	interval.slice <- interval[ix.100,1] 	avg.100 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.100) 	avg.jockey.int.100[ix,1] <- as.numeric(x[,2]) 	# 50 	ix.50 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.2 < race.seq[,1]) 	jockey <- data.raw[ix.50,jockey.ix] 	interval.slice <- interval[ix.50,1] 	avg.50 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.50) 	avg.jockey.int.50[ix,1] <- as.numeric(x[,2]) 	# 20 	ix.20 <- (i-1 >= race.seq[,1]) & (i-roll.back.jockey.interval.3 < race.seq[,1]) 	jockey <- data.raw[ix.20,jockey.ix] 	interval.slice <- interval[ix.20,1] 	avg.20 <- interval.historical( cbind(jockey,interval.slice),c("jockey","interval")) 	ix <- i ==  race.seq[,1] 	x <- matrix(NA, nr=sum(ix,na.rm=T), nc=2) 	x[,1] <- data.raw[ix,c(jockey.ix)] 	x <- fill.avg.interval(x, avg.20) 	avg.jockey.int.20[ix,1] <- as.numeric(x[,2]) } #  View(cbind(avg.jockey.int.100,avg.jockey.int.50,avg.jockey.int.20))
# 1) # get raw data from file data.raw <- as.matrix(read.csv(paste("../input/race-result-horse-fromKaggle.LantanaCamara.2014to2016.csv", sep=""), sep=",", header=T)) ix <- matrix(TRUE, nr=nrow(data.raw), nc=1) first.col <- as.numeric(data.raw[,1])
source("p")
source("pre.factors.r")
